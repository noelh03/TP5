{"ast":null,"code":"import _classCallCheck from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _possibleConstructorReturn from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _callSuper(this, ConnectableObservable);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  _inherits(ConnectableObservable, _Observable);\n\n  return _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"_teardown\",\n    value: function _teardown() {\n      this._refCount = 0;\n      var _connection = this._connection;\n      this._subject = this._connection = null;\n      _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var connection = this._connection;\n\n      if (!connection) {\n        connection = this._connection = new Subscription();\n        var subject = this.getSubject();\n        connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, function () {\n          _this2._teardown();\n\n          subject.complete();\n        }, function (err) {\n          _this2._teardown();\n\n          subject.error(err);\n        }, function () {\n          return _this2._teardown();\n        })));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n}(Observable); //# sourceMappingURL=ConnectableObservable.js.map","map":null,"metadata":{},"sourceType":"module"}