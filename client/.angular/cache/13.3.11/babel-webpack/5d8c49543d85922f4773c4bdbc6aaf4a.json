{"ast":null,"code":"import _classCallCheck from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _possibleConstructorReturn from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _getPrototypeOf from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*#__PURE__*/function (_Scheduler) {\n  function AsyncScheduler(SchedulerAction) {\n    var _this;\n\n    var now = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Scheduler.now;\n\n    _classCallCheck(this, AsyncScheduler);\n\n    _this = _callSuper(this, AsyncScheduler, [SchedulerAction, now]);\n    _this.actions = [];\n    _this._active = false;\n    return _this;\n  }\n\n  _inherits(AsyncScheduler, _Scheduler);\n\n  return _createClass(AsyncScheduler, [{\n    key: \"flush\",\n    value: function flush(action) {\n      var actions = this.actions;\n\n      if (this._active) {\n        actions.push(action);\n        return;\n      }\n\n      var error;\n      this._active = true;\n\n      do {\n        if (error = action.execute(action.state, action.delay)) {\n          break;\n        }\n      } while (action = actions.shift());\n\n      this._active = false;\n\n      if (error) {\n        while (action = actions.shift()) {\n          action.unsubscribe();\n        }\n\n        throw error;\n      }\n    }\n  }]);\n}(Scheduler); //# sourceMappingURL=AsyncScheduler.js.map","map":null,"metadata":{},"sourceType":"module"}