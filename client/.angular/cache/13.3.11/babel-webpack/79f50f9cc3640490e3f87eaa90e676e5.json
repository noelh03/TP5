{"ast":null,"code":"import _classCallCheck from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport _possibleConstructorReturn from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\possibleConstructorReturn.js\";\nimport _isNativeReflectConstruct from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\isNativeReflectConstruct.js\";\nimport _get from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\get.js\";\nimport _getPrototypeOf from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\getPrototypeOf.js\";\nimport _inherits from \"C:\\\\TEMP\\\\3710\\\\TP5\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\inherits.js\";\n\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\n\nimport { Action } from './Action';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\nexport var AsyncAction = /*#__PURE__*/function (_Action) {\n  function AsyncAction(scheduler, work) {\n    var _this;\n\n    _classCallCheck(this, AsyncAction);\n\n    _this = _callSuper(this, AsyncAction, [scheduler, work]);\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n\n  _inherits(AsyncAction, _Action);\n\n  return _createClass(AsyncAction, [{\n    key: \"schedule\",\n    value: function schedule(state) {\n      var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n      var _a;\n\n      if (this.closed) {\n        return this;\n      }\n\n      this.state = state;\n      var id = this.id;\n      var scheduler = this.scheduler;\n\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, delay);\n      }\n\n      this.pending = true;\n      this.delay = delay;\n      this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);\n      return this;\n    }\n  }, {\n    key: \"requestAsyncId\",\n    value: function requestAsyncId(scheduler, _id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    }\n  }, {\n    key: \"recycleAsyncId\",\n    value: function recycleAsyncId(_scheduler, id) {\n      var delay = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n      if (delay != null && this.delay === delay && this.pending === false) {\n        return id;\n      }\n\n      if (id != null) {\n        intervalProvider.clearInterval(id);\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute(state, delay) {\n      if (this.closed) {\n        return new Error('executing a cancelled action');\n      }\n\n      this.pending = false;\n\n      var error = this._execute(state, delay);\n\n      if (error) {\n        return error;\n      } else if (this.pending === false && this.id != null) {\n        this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n      }\n    }\n  }, {\n    key: \"_execute\",\n    value: function _execute(state, _delay) {\n      var errored = false;\n      var errorValue;\n\n      try {\n        this.work(state);\n      } catch (e) {\n        errored = true;\n        errorValue = e ? e : new Error('Scheduled action threw falsy error');\n      }\n\n      if (errored) {\n        this.unsubscribe();\n        return errorValue;\n      }\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        var id = this.id,\n            scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        this.work = this.state = this.scheduler = null;\n        this.pending = false;\n        arrRemove(actions, this);\n\n        if (id != null) {\n          this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n\n        this.delay = null;\n\n        _get(_getPrototypeOf(AsyncAction.prototype), \"unsubscribe\", this).call(this);\n      }\n    }\n  }]);\n}(Action); //# sourceMappingURL=AsyncAction.js.map","map":null,"metadata":{},"sourceType":"module"}